# This is an example of simplest single-user setup of Feeds Fun news reader
#
# This config should work as is, but you may want to change it in order to better suit your self-hosting needs
# The basic instructions are provided in the README.md file in the same directory as this file
# Check comments below for more details

volumes:
  ffun_postgres_data: {}  # Permanent storage for database
  ffun_frontend_data: {}  # Permanent storage for frontend files

  # These volumes are required for Caddy to work, you don't need them if you don't use Caddy
  ffun_caddy_data: {}
  ffun_caddy_config: {}


services:

  # PostgreSQL database
  postgres:
    image: postgres:15.2

    volumes:
      - ffun_postgres_data:/var/lib/postgresql/data

    environment:
      POSTGRES_DB: ffun
      POSTGRES_USER: ffun
      POSTGRES_PASSWORD: ffun

    healthcheck:
      test: "pg_isready -U ffun -d ffun"
      interval: 1s
      timeout: 5s
      retries: 10

  # HTTP API server for Feeds Fun
  backend-api:
    image: tiendil/feeds-fun-backend:latest

    depends_on:
      postgres:
        condition: service_healthy

    # We always run DB migrations on startup to ensure the DB schema is up to date with the code
    command:
      - /bin/bash
      - -c
      - |
        ffun migrate
        echo "migrations successed"
        uvicorn ffun.application.application:app --host 0.0.0.0 --port 8000 --workers 1

    volumes:
      - ${PWD}/ffun.env:/ffun/.env  # general config
      - ${PWD}/tag_processors.toml:/ffun/tag_processors.toml  # tag processors config

    environment:
      FFUN_ENABLE_API: "True"
      PYTHONOPTIMIZE: "1"

  # Background workers for download feeds and tag them
  backend-workers:
    image: tiendil/feeds-fun-backend:latest

    depends_on:
      postgres:
        condition: service_healthy

    # We always run DB migrations on startup to ensure the DB schema is up to date with the code
    #
    # Workers are specified by `--loader` and `--librarian` flags
    # You can run them in separate containers if you want to tune load on your server
    # but most likely you will not need to do that in the single-user setup
    command:
      - /bin/bash
      - -c
      - |
        ffun migrate
        echo "migrations successed"
        ffun workers --loader --librarian

    volumes:
      - ${PWD}/ffun.env:/ffun/.env  # general config
      - ${PWD}/tag_processors.toml:/ffun/tag_processors.toml  # tag processors config

    environment:
      PYTHONOPTIMIZE: "1"

  # Service builds frontend UI and copies it to the static data volume to be served by Caddy
  frontend-data:
    image: tiendil/feeds-fun-frontend-data:latest

    volumes:
      - ${PWD}/ffun.env:/ffun/.env  # general config
      - ffun_frontend_data:/ffun-static-data  # this volume is shared with Caddy

    environment: {}

  # Caddy web server for serving frontend and API, you can use any other web server you like
  # the Caddy was chosen for its simplicity and ease of use
  frontend-caddy:
    image: caddy:2.10.0

    volumes:
      - ffun_caddy_data:/data
      - ffun_caddy_config:/config
      - ffun_frontend_data:/ffun-static-data
      - ${PWD}/Caddyfile:/etc/caddy/Caddyfile

    ports:
      - "80:80"
      - "443:443"
