---
title = "Top LLM frameworks may not be as reliable as you think"
external_url = "https://tiendil.org/en/posts/top-llm-frameworks-may-not-be-as-reliable-as-you-may-think"
external_tags = []
published_at = "2024-09-19T12:00:00+00:00"

[attribution]
title = "Top LLM frameworks may not be as reliable as you think"
authors = ["Aliaksei Yaletski"]
link = "https://tiendil.org/en/posts/top-llm-frameworks-may-not-be-as-reliable-as-you-may-think"
license = "CC BY-NC-ND 4.0"
---
<p>Nearly a month ago, I decided to add Gemini support to
<a href="https://feeds.fun/" target="_blank">Feeds Fun</a>
 and did some research on top LLM frameworks â€” I didn't want to write my own bicycle.</p>
<p>As a result, I found an embarrassing bug (in my opinion, of course) in the integration with Gemini in
<a href="https://github.com/run-llama/llama_index" target="_blank">LLamaIndex</a>
. Judging by the code, it is also present in
<a href="https://github.com/deepset-ai/haystack-core-integrations" target="_blank">Haystack</a>
 and in the plugin for
<a href="https://github.com/langchain-ai/langchain-google" target="_blank">LangChain</a>
. And the root of the problem is in the Google SDK for Python.</p>
<p>When initializing a new client for Gemini, the framework code overwrites/replaces API keys in all clients created before. Because the API key, by default, is stored in a
<a href="https://en.wikipedia.org/wiki/Singleton_pattern" target="_blank">singleton</a>
.</p>
<p>It is death-like, if you have a multi-tenant application, and unnoticeable in all other cases. Multi-tenant means that your application works with multiple users.</p>
<p>For example, in my case, in Feeds Fun, a user can enter their API key to improve the quality of the service. Imagine what a funny situation could happen:
<strong>a user entered an API key to process their news but spent tokens (paid for) for all service users</strong>
.</p>
<p>I reported this bug only in LLamaIndex as a security issue, and there has been no reaction for 3 weeks. I'm too lazy to reproduce and report for Haystack and LangChain. So
<strong>this is your chance to report a bug to a top repository</strong>
. All the info will be below, reproducing is not difficult.</p>
<p>This error is notable for many reasons:</p>
<ol>
<li>The assessment of the criticality of the error depends a lot on taste, experience, and context. For me, in the projects I worked on, this is a critical security issue. However, it seems that this is not critical at all for most current projects that use LLMs. Which leads to some thoughts about mainstream near-LLM development.</li>
<li>This is a good indicator of a low level of code quality control: code reviews, tests, all processes. After all, this is an integration with one of the major API providers. The problem could have been found in many different ways, but none worked.</li>
<li>This is a good illustration of the vicious approach to development: "copy-paste from a tutorial and push to prod". To make such a mistake, you had to ignore both the basic architecture of your project and the logic of calling the code you are copying.</li>
</ol>
<p>Ultimately, I gave up on these frameworks and implemented my own client over HTTP API.</p>
<p>My conclusion from this mess is: you can't trust the code under the hood of modern LLM frameworks. You need to double-check and proofread it. Just because they state that they are "production-ready" doesn't mean they are really production-ready.</p>
<p>Let me tell you more about the bug.</p>
