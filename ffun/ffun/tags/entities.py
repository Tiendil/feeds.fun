import enum
from typing import Annotated, Literal

import pydantic

from ffun.core.entities import BaseEntity
from ffun.domain.entities import TagUid, TagUidPart


# Tag categories are required for:
# - tag normalization (define mutability and removability of a tag)
# - GUI (potentially in the future)
# - analytics (potentially in the future)
class TagCategory(enum.StrEnum):
    # represents a network domain, for example, the domain of a website whose feed is tagged
    network_domain = "network-domain"

    # represents a native feed tag, i.e. tags that were assigned by the author of the feed
    feed_tag = "feed-tag"

    # represents a tag with special meaning
    # most likely this tag is defined by a specific tag processor that checks
    # versy specific conditions, for example, @upper-case-title
    special = "special"

    # represents a tag that is assigned by some non-deterministic processor
    # for example, tags generated by LLMs
    free_form = "free-form"

    # Tags with this category created for testing purposes, most-likely by automated tests
    test = "test"


TagCategories = Annotated[
    set[TagCategory],
    # tag must have at least one category for proper normalization
    pydantic.Field(default_factory=set, min_length=1),
]


class NormalizationMode(enum.StrEnum):
    raw = "raw"  # tag should be processed by normalizers and can be removed
    preserve = "preserve"  # tag should be processed by normalizers but can not be removed
    final = "final"  # tag should not be processed by normalizers and can not be removed


class TagInNormalization(BaseEntity):
    uid: TagUid
    parts: list[TagUidPart]

    mode: NormalizationMode

    link: str | None
    categories: TagCategories


class NormalizerType(enum.StrEnum):
    fake = "fake"
    part_blacklist = "part_blacklist"
    part_replacer = "part_replacer"
    splitter = "splitter"
    form_normalizer = "form_normalizer"


class BaseNormalizer(BaseEntity):
    id: int
    enabled: bool
    name: str
    type: NormalizerType


class PartBlacklist(BaseNormalizer):
    type: Literal[NormalizerType.part_blacklist] = NormalizerType.part_blacklist
    blacklist: set[str] = pydantic.Field(default_factory=set)


class PartReplacer(BaseNormalizer):
    type: Literal[NormalizerType.part_replacer] = NormalizerType.part_replacer
    replacements: dict[str, str] = pydantic.Field(default_factory=dict)


class Splitter(BaseNormalizer):
    type: Literal[NormalizerType.splitter] = NormalizerType.splitter
    separators: set[str] = pydantic.Field(default_factory=set)


class FormNormalizer(BaseNormalizer):
    type: Literal[NormalizerType.form_normalizer] = NormalizerType.form_normalizer
    spacy_model: str
    cos_cache_size: int
    forms_cache_size: int


TagNormalizer = Annotated[
    PartBlacklist | PartReplacer | Splitter | FormNormalizer,
    pydantic.Field(discriminator="type"),
]


class NormalizersConfig(pydantic.BaseModel):
    tag_normalizer: tuple[TagNormalizer, ...]
